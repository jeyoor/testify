(ns testify.core
    (:use compojure.core)
    (:require 
        [compojure.route :as route]
        [compojure.handler :as handler]
        )

)

(defn dirlinks []
    (.. System (getProperties) (get "os.name"))
)
(defn sayhi [] "Hello!")

;UTILITY
;check input if key or value
;BEWARE! HERE THERE BE SIDE EFFECTS!
(defn checkkeys [inputmap]

    (doseq [[paramname paramvalue] inputmap]
       (println (str paramname " " paramvalue) )
    )
   "<h1>Done!</h1>"
)

(defn dump-map [fname  inputmap]
    (binding [*print-dup* true]
        ( spit (str "resources/pages/" fname) inputmap) 
        (println inputmap)
        (str "<h1>Echoed response test map to " fname  " </h1>")
    )
)


;UTILITY
; macro 
(defmacro frfirst [colls] 
    `(let [colls# ~colls] 
        (first (rest (first colls#) ) ) 
    ) 
)

(defn subsw [submap target]
    (cond
        ;if the list is all eaten up, return the result!
        (= submap ()) target
        ;TODO: check target viability here?       
        :else 
            (subsw (rest submap) 
                (. target replaceAll 
                    (str (ffirst submap) ) (str (frfirst submap) ) 
                )
            )
    )
)
; given a key-value mapset, substitute everything in the given string
(defn simpl-subs [fname]
    ;DEBUG
    (let [submap 
            

                    ( load-file (str  "resources/pages/" fname))              
         ]
                  
        ;DEBUG
        ;(str submap)
        (get submap :template)
        
        (let [raw-templ 
                (slurp 
                    (str "resources/templates/" (get submap :template)) 
                )
             ]
             ;DEBUG
             ;(str raw-templ)             
            (subsw submap raw-templ)
        )
        
    ) 
)


(defn strprint [inmap]
   (str inmap)
)

(defroutes main-routes
   ;match main
  (GET "/admin" [] (sayhi) )
  (GET "/reader" [fname] (simpl-subs fname) )
  (POST "/writer"  [fname & everything] (dump-map fname everything) )
  (GET "/" [] (dirlinks) )
  (route/resources "/")
  (route/not-found "Page not found"))

(def app
  (handler/site main-routes))
